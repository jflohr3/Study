#include <cstlib>

#define BIT_1 (0x1)


// function print out singly linked list in reverse order
// LL data is just an int
// 0 1 2 3
// 3 2 1 0
class LL
{
  uint32_t uuid;
  LL* next = NULL;
}

// iterate through list
// store last node ptr 
// for each node besides first

// not checking first ptr arg
void print_reverse(LL* head)
{
  if(head != NULL)
  {
    if(head->next != NULL)
      print_reverse(head->next);
    printf("%d\n", head->uuid);
  }
}

// A = 0x6
// A = 0x4 + sizeof(uint32_t)
// 12 in base ten 0xC
uint32_t * A = (uint32_t*) 0x4 ;
A += 2 ;

// difference between these?
static int a = 0 ;
static int a ;








//convert unsigned 32 bit integer into an ascii string
// and in hexadecimal

// in : 4660
// out: "0x1234"
// in : 15
// out: "0xF"
void uint32_to_hex(uint32_t in)
{
  
  // Max hex digits for 32bits will be 8
  // plus 2 over head for 0x
  // plus 1 null term
  
  char hex_str[11] = {0};
  char hex_str[0] = '0';
  char hex_str[1] = 'x';
  
  // each hex digit is 4 bits
  // take modulus os 16 to get the remainder
  // the remainder translated to a hex digit
  // shift the input by those 4 digits
  // repeat until the input is empty
  
  // not handling zero input vals
  uint32_t remainder = 0;
  int i = 10; // char before null term
  while(in)
  {
    remainder = in % 16;
    in = in >> 4;
    
    // 0123456789 abcdef least->most
    if(remainder <= 9)
     hex_str[i] = '0' + remainder;
    else
     hex_str[i] = 'A' + (remainder - 10);
    --i;
  }
  
  while(i > 1)
  {
    hex_str[i] = 0;
    --i;
  }
  
}



  // I assume we have a hex string representing the input, albiet in reversed 
  // and no 0X
  
  // need to reverse, adding 0x to the front;
  char hex_str[11] = {0};
  hex_str[0] = '0';
  hex_str[1] = 'x';
  hex_str[11] = '\0';
  
  for(i=0; rev_str[i != '\0']; ++i)
  {
  }
  // i is at null term
  in_idx = i;
  out_idx = 2;
  while(i != -1)
  {
    
  }


uint32_t toggle_bit(uint32_t in, uint32_t bit_num)
{
  uint32_t which_bit = BIT_1;
  
  // ensure input bit_num less than 31
  which_bit = BIT_1 << bit_num; 
  
  return (in ^ which_bit);
  return in;
}

uint32_t toggle_bit(uint32_t in, uint32_t bit_num)
{
  uint32_t which_bit = BIT_1;
  
  // ensure input bit_num less than 31
  which_bit = BIT_1 << bit_num; 
  
  if(which_bit & in)
  {
    // unset
    in = in & (~which_bit);
  }
  else
  {
    // set
    in = in | which_bit;
  }
  return in;
}
